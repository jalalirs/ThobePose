import sys
sys.path.append("/Applications/Autodesk/maya2015/Maya.app/Contents/Frameworks/Python.framework/Versions/Current/lib/python2.7/site-packages/numpy-1.9.1-py2.7-macosx-10.6-intel.egg")
import maya.standalone
maya.standalone.initialize("Python")

import maya.cmds as cmds
import numpy as np
import math as ma
import gc
import os
import multiprocessing as mp
import threading

import maya.utils as utils
import threading
import time
import iff_reader as iff

cmds.setAttr("hardwareRenderGlobals.graphicsHardwareGeometryCachingData", 0)
cmds.setAttr("hardwareRenderGlobals.maximumGeometryCacheSize", 2)

MAYA_FILE = "../scenes/Hamed.mb"
cmds.file(MAYA_FILE, force=True, open=True)



PROJECT_ROOT = "/Users/jalalirs/Documents/technincal_material/kfupm/thesis_crap/human_walking/github/"
DRESSES = [ "cotton_mesh","chiffon_mesh", "ddenim_mesh", "serge_mesh", "gabardine_mesh", "pique_mesh", "interlock_mesh" ]
RENDER_DRESSES = ["cotton_mesh", "chiffon_mesh", "ddenim_mesh", "serge_mesh", "gabardine_mesh", "pique_mesh", "interlock_mesh" ]
RENDER_ROOT = "images/"


THOBE_SHADER="thobeShader"
WHITE_SHADER = "whiteShader"

THOBE_FACES = [(6901,6905),(6907,6910),(6971,7163),(7254,7260),(7278,7279),(7306,7323),(7353,7361),(7417,7467),(7470,7571),(7580,7580),(7582,7584),(7587,7595),(7606,7608),(7612,7612),(7624,7624),(7626,7629),(7632,7649),(7655,7662),(7678,7684),(7699,7710),(7740,7760),(7774,7791),(7826,7905),(7915,7916),(7924,7935),(7938,7948),(7969,7990),(7992,8007),(8018,8102),(8167,8177),(8190,8205),(8215,8224),(8227,8228),(8244,8250),(8256,8257),(8275,8282),(8284,8284),(8287,8290),(8295,8295),(8297,8299),(8304,8323),(8325,8383),(8415,8438),(8469,8499),(8512,8514),(8527,8539),(8542,8548),(8564,8564),(8567,8567),(8570,8572),(8578,8578),(8584,8585),(8588,8594),(8597,8598),(8604,8608),(8617,8644),(8649,8650),(8652,8670),(8674,8677),(8699,8712),(8725,8746),(8760,8771),(8780,8809),(8829,8848),(8858,8864),(8866,8866),(8883,8886),(8888,8888),(8895,8896),(8898,8898),(8902,8914),(8934,8966),(8975,8981),(8988,8999),(9003,9004),(9058,9154),(9173,9179),(9183,9183),(9192,9193),(9195,9198),(9203,9204),(9207,9207),(9219,9219),(9223,9224),(9226,9241),(9243,9243),(9252,9252),(9255,9276),(9287,9290),(9296,9299),(9301,9308),(9316,9318),(9329,9336),(9345,9363),(9372,9400),(9407,9409),(9421,9435),(9440,9450),(9457,9464),(9470,9480),(9485,9486),(9492,9492),(9495,9496),(9507,9508),(9510,9512),(9515,9515),(9517,9523),(9527,9529),(9533,9534),(9536,9545),(9547,9547),(9550,9561),(9567,9568),(9570,9576),(9583,9583),(9592,9595),(9613,9643),(9664,9675),(9688,9693),(9702,9710),(9713,9715),(9732,9784),(9787,9791),(9797,9799),(9802,9802),(9804,9805),(9815,9817),(9819,9831),(9837,9839),(9842,9855),(9859,9867),(9875,9883),(9885,9900),(9903,9903),(9905,9909),(9928,9928),(9931,9934),(9943,9948),(9952,9966),(9970,9987),(10004,10005),(10018,10026),(10030,10038),(10046,10047),(10050,10074),(10078,10082),(10085,10088),(10092,10092),(10094,10094),(10097,10101),(10105,10105),(10107,10109),(10116,10136),(10142,10143),(10151,10153),(10159,10160),(10162,10166),(10172,10180),(10187,10211),(10231,10238),(10268,10272),(10288,10318),(10323,10343),(10350,10376),(10380,10385),(10389,10389),(10391,10391),(10394,10394),(10396,10397),(10400,10409),(10416,10438),(10440,10455),(10457,10461),(10473,10476),(10479,10480),(10485,10489),(10493,10507),(10509,10510),(10517,10527),(10531,10531),(10533,10533),(10538,10540),(10550,10552),(10555,10569),(10589,10591),(10596,10604),(10619,10645),(10655,10659),(10661,10663),(10671,10679),(10685,10685),(10689,10689),(10694,10704),(10716,10718),(10720,10742),(10744,10754),(10759,10759),(10766,10766),(10771,10778),(10788,10795),(10797,10798),(10800,10801),(10805,10812),(10814,10817),(10829,10829),(10831,10833),(10838,10839),(10843,10847),(10850,10851),(10855,10857),(10859,10873),(10876,10879),(10894,10896),(10901,10906),(10915,10951),(10953,10953),(10960,10960),(10963,10965),(10969,10969),(10979,10993),(11000,11006),(11008,11025),(11027,11044),(11053,11054),(11059,11060),(11066,11072),(11076,11076),(11089,11090),(11094,11095),(11098,11098),(11100,11100),(11106,11106),(11108,11122),(11124,11127),(11131,11142),(11149,11162),(11167,11175),(11183,11195),(11202,11212),(11222,11224),(11228,11233),(11238,11238),(11242,11242),(11247,11248),(11255,11274),(11281,11294),(11303,11313),(11318,11319),(11330,11331),(11339,11346),(11352,11354),(11357,11358),(11361,11361),(11363,11364),(11371,11371),(11375,11385),(11393,11396),(11400,11405),(11408,11408),(11410,11416),(11418,11420),(11423,11423),(11428,11462),(11472,11484),(11498,11509),(11520,11523),(11529,11529),(11531,11531),(11533,11533),(11535,11535),(11537,11545),(11554,11569),(11580,11596),(11607,11607),(11615,11618),(11630,11635),(11642,11646),(11651,11669),(11674,11675),(11678,11682),(11686,11693),(11697,11702),(11707,11708),(11710,11712),(11714,11717),(11722,11741),(11745,11756),(11770,11781),(11784,11786),(11790,11790),(11795,11797),(11800,11803),(11810,11828),(11830,11837),(11847,11866),(11870,11870),(11877,11881),(11891,11896),(11901,11904),(11912,11913),(11919,11924),(11926,11926),(11929,11932),(11935,11942),(11945,11945),(11947,11952),(11956,11965),(11968,11985),(11993,11998),(12010,12018),(12028,12030),(12033,12037),(12040,12041),(12046,12050),(12055,12057),(12059,12059),(12061,12061),(12066,12067),(12069,12080),(12086,12099),(12110,12127),(12132,12136),(12140,12142),(12150,12152),(12154,12154),(12161,12164),(12166,12177),(12181,12182),(12193,12197),(12199,12200),(12203,12217),(12226,12245),(12249,12254),(12262,12277),(12291,12293),(12295,12296),(12303,12305),(12307,12307),(12309,12311),(12317,12317),(12319,12333),(12339,12350),(12352,12352),(12362,12380),(12382,12387),(12406,12407),(12410,12413),(12421,12428),(12430,12431),(12434,12438),(12440,12440),(12442,12446),(12448,12448),(12453,12456),(12459,12473),(12482,12491),(12496,12506),(12511,12514),(12517,12519),(12522,12524),(12538,12538),(12540,12544),(12547,12548),(12550,12553),(12555,12555),(12557,12561),(12564,12570),(12575,12577),(12581,12599),(12602,12603),(12605,12616),(12638,12638),(12643,12650),(12652,12660),(12662,12663),(12668,12669),(12675,12675),(12680,12680),(12682,12682),(12684,12692),(12695,12701),(12708,12731),(12740,12747),(12762,12762),(12764,12768),(12771,12772),(12774,12775),(12778,12780),(12782,12782),(12786,12794),(12804,12808),(12817,12835),(12839,12853),(12873,12876),(12881,12892),(12894,12894),(12896,12909),(12912,12917),(12925,12928),(12935,12961),(12964,12969),(12986,12991),(12996,12997),(13000,13003),(13005,13006),(13011,13019),(13025,13027),(13029,13045),(13048,13049),(13052,13058),(13080,13085),(13088,13103),(13106,13114),(13116,13116),(13126,13126),(13128,13129),(13133,13137),(13140,13142),(13145,13145),(13147,13155),(13162,13185),(13194,13194),(13201,13208),(13211,13211),(13213,13214),(13216,13221),(13223,13223),(13227,13228),(13235,13248),(13250,13271),(13296,13315),(13320,13323),(13326,13332),(13341,13342),(13344,13354),(13357,13369),(13374,13384),(13392,13392),(13395,13403),(13405,13405),(13411,13416),(13419,13423),(13426,13428),(13435,13453),(13472,13473),(13479,13491),(13494,13504),(13506,13506),(13508,13518),(13520,13522),(13529,13539),(13542,13544),(13547,13556),(13562,13569),(13578,13578),(13580,13586),(13591,13607),(13617,13620),(13622,13633),(13651,13681),(13683,13685),(13689,13689),(13691,13692),(13694,13696),(13699,13701),(13703,13715),(13722,13732),(13734,13737),(13739,13740),(13742,13751),(13754,13754),(13762,13772),(13775,13781),(13783,13795),(13800,13835),(13837,13839),(13841,13842),(13845,13871),(13873,13883),(13887,13888),(13893,13919),(13923,14428)]
THOBE_FACES += [(1,2),(5,5),(96,280),(356,360),(371,374),(380,395),(397,398),(406,421),(444,445),(448,511),(557,566),(569,629),(657,657),(675,675),(677,679),(684,686),(698,719),(731,731),(738,738),(744,745),(748,748),(751,751),(755,765),(774,804),(806,824),(858,860),(891,892),(899,920),(927,983),(988,988),(995,996),(1002,1002),(1004,1021),(1034,1047),(1086,1088),(1091,1104),(1106,1130),(1137,1156),(1187,1194),(1202,1242),(1260,1264),(1268,1272),(1279,1299),(1303,1303),(1317,1330),(1332,1339),(1357,1360),(1365,1365),(1374,1394),(1405,1413),(1418,1422),(1441,1444),(1483,1503),(1511,1529),(1536,1540),(1542,1588),(1592,1594),(1597,1613),(1624,1628),(1632,1633),(1635,1638),(1656,1657),(1659,1661),(1663,1669),(1677,1688),(1691,1704),(1720,1741),(1744,1756),(1758,1758),(1807,1817),(1827,1872),(1876,1885),(1894,1916),(1923,1923),(1939,1941),(1943,1944),(1947,1956),(1959,1982),(1990,1995),(2001,2006),(2011,2011),(2016,2024),(2035,2035),(2037,2038),(2042,2042),(2044,2044),(2046,2059),(2062,2070),(2072,2077),(2079,2084),(2123,2134),(2150,2164),(2168,2191),(2195,2199),(2202,2219),(2241,2241),(2246,2247),(2257,2259),(2261,2287),(2294,2300),(2304,2304),(2316,2318),(2327,2328),(2341,2341),(2345,2348),(2351,2351),(2355,2355),(2360,2371),(2374,2376),(2386,2401),(2405,2438),(2448,2466),(2476,2478),(2487,2510),(2527,2527),(2529,2534),(2551,2563),(2568,2571),(2577,2583),(2589,2589),(2601,2602),(2612,2612),(2615,2625),(2638,2644),(2654,2659),(2664,2679),(2691,2714),(2718,2737),(2739,2742),(2744,2755),(2774,2787),(2791,2799),(2810,2818),(2822,2827),(2832,2832),(2834,2835),(2841,2847),(2850,2854),(2856,2862),(2871,2880),(2883,2884),(2889,2890),(2892,2893),(2895,2900),(2903,2905),(2915,2917),(2934,2934),(2938,2939),(2943,2970),(2974,2982),(3003,3056),(3059,3070),(3077,3077),(3087,3090),(3097,3102),(3110,3110),(3117,3129),(3138,3148),(3151,3151),(3156,3156),(3158,3160),(3163,3165),(3172,3173),(3177,3184),(3189,3192),(3212,3213),(3216,3217),(3219,3247),(3266,3276),(3281,3333),(3339,3351),(3360,3361),(3367,3372),(3374,3374),(3379,3380),(3382,3387),(3395,3410),(3413,3416),(3424,3426),(3433,3433),(3436,3438),(3447,3453),(3457,3461),(3467,3468),(3470,3473),(3476,3476),(3478,3479),(3481,3483),(3486,3488),(3492,3492),(3496,3497),(3501,3507),(3510,3514),(3542,3578),(3582,3600),(3602,3605),(3610,3610),(3614,3627),(3630,3634),(3637,3638),(3641,3644),(3654,3662),(3665,3670),(3685,3690),(3692,3696),(3699,3703),(3705,3705),(3709,3713),(3717,3720),(3724,3726),(3728,3733),(3737,3737),(3746,3748),(3751,3755),(3761,3780),(3786,3812),(3829,3844),(3846,3855),(3857,3861),(3866,3869),(3875,3877),(3879,3883),(3885,3885),(3891,3891),(3893,3895),(3898,3900),(3907,3913),(3917,3922),(3927,3931),(3938,3944),(3947,3950),(3957,3965),(3968,3971),(3978,3980),(3982,3986),(3988,3992),(3997,4001),(4003,4007),(4010,4015),(4021,4025),(4030,4038),(4041,4048),(4052,4062),(4072,4083),(4092,4094),(4096,4096),(4100,4105),(4108,4121),(4123,4127),(4129,4132),(4136,4137),(4139,4139),(4143,4143),(4151,4162),(4165,4173),(4185,4187),(4189,4189),(4191,4191),(4197,4201),(4203,4207),(4214,4214),(4216,4223),(4228,4230),(4233,4235),(4237,4242),(4244,4258),(4261,4261),(4263,4267),(4270,4281),(4285,4286),(4291,4303),(4309,4314),(4317,4326),(4341,4343),(4347,4352),(4358,4375),(4377,4382),(4384,4384),(4387,4388),(4390,4402),(4405,4409),(4426,4433),(4435,4435),(4437,4437),(4439,4448),(4450,4456),(4462,4463),(4465,4470),(4475,4487),(4492,4493),(4496,4497),(4503,4515),(4517,4523),(4525,4525),(4533,4533),(4535,4538),(4543,4547),(4557,4568),(4572,4584),(4587,4589),(4596,4599),(4601,4601),(4603,4604),(4608,4617),(4620,4622),(4626,4628),(4634,4649),(4654,4658),(4673,4678),(4680,4682),(4690,4710),(4716,4716),(4720,4720),(4723,4723),(4728,4752),(4754,4754),(4759,4759),(4762,4764),(4768,4778),(4785,4787),(4792,4805),(4818,4831),(4835,4835),(4840,4854),(4856,4856),(4858,4859),(4861,4861),(4865,4871),(4874,4880),(4883,4885),(4897,4903),(4910,4918),(4920,4929),(4935,4935),(4937,4940),(4945,4953),(4962,4966),(4978,4979),(4983,4996),(4998,4999),(5001,5001),(5004,5012),(5014,5021),(5036,5054),(5058,5062),(5066,5084),(5087,5087),(5089,5090),(5093,5098),(5100,5100),(5105,5110),(5114,5123),(5142,5150),(5158,5171),(5179,5182),(5189,5192),(5194,5206),(5208,5220),(5223,5233),(5235,5235),(5238,5243),(5257,5260),(5263,5279),(5282,5285),(5292,5310),(5312,5317),(5320,5320),(5323,5325),(5328,5332),(5335,5344),(5346,5354),(5369,5392),(5402,5405),(5408,5422),(5424,5425),(5434,5437),(5441,5446),(5450,5450),(5452,5453),(5459,5459),(5461,5464),(5466,5466),(5469,5472),(5476,5479),(5481,5484),(5489,5491),(5497,5497),(5501,5517),(5520,5537),(5542,5542),(5544,5544),(5546,5546),(5548,5549),(5551,5551),(5557,5564),(5569,5579),(5597,5615),(5617,5628),(5633,5633),(5641,5653),(5656,5658),(5660,5664),(5666,5668),(5674,5674),(5676,5680),(5683,5696),(5698,5699),(5709,5712),(5716,5724),(5727,5736),(5741,5745),(5748,5751),(5753,5753),(5755,5763),(5769,5775),(5778,5786),(5806,5808),(5810,5833),(5841,5842),(5844,5859),(5861,5863),(5865,5866),(5869,5876),(5878,5881),(5886,5903),(5915,5917),(5924,5928),(5934,5948),(5953,5962),(5964,5966),(5968,5968),(5971,5971),(5978,5979),(5981,5993),(6011,6013),(6015,6044),(6050,6053),(6056,6063),(6067,6067),(6070,6072),(6075,6077),(6079,6084),(6086,6088),(6090,6091),(6096,6111),(6115,6117),(6120,6124),(6132,6148),(6158,6171),(6175,6187),(6204,6206),(6208,6234),(6243,6248),(6250,6252),(6255,6258),(6261,6263),(6265,6269),(6271,6274),(6277,6278),(6285,6292),(6300,6301),(6304,6315),(6320,6329),(6332,6345),(6350,6351),(6356,6358),(6360,6361),(6366,6376),(6380,6405),(6409,6410),(6416,6435),(6437,6438),(6440,6483),(6485,6492),(6496,6900)]
THOBE_DISCRIPTION = {"thobe":(THOBE_FACES,THOBE_SHADER)}


TWOCOLOR_DISCRIPTION = {\
    "leftThigh":([(2946,2949), (2962,2989), (3234,3329)],"leftThighShader"),\
    "rightThigh":([(1038,1041), (1054,1081), (1326,1421)],"rightThighShader"),\
    "leftKnee":([(3042,3073), (3106,3137)],"leftThighShader"),\
    "rightKnee":([(1134,1165), (1198,1229)],"rightThighShader"),\
    "leftLeg":([(3076,3077), (3080,3081), (3084,3086), (3089,3090), (3093,3093), (3096,3098), (3101,3102), (3105,3105), (3138,3169), (3174,3177), (3182,3185), (3190,3193), (3198,3201), (3206,3209), (3214,3217), (3222,3225), (3230,3233), (3330,3361)],"leftThighShader"),\
    "rightLeg":([(1168,1169), (1172,1173), (1176,1178), (1181,1182), (1185,1185), (1188,1190), (1193,1194), (1197,1197), (1230,1261), (1266,1269), (1274,1277), (1282,1285), (1290,1293), (1298,1301), (1306,1309), (1314,1317), (1322,1325), (1422,1453)],"rightThighShader"),\
    "leftAnkle":([(3074,3075), (3078,3079), (3082,3083), (3087,3088), (3091,3092), (3094,3095), (3099,3100), (3103,3104), (3170,3173), (3178,3181), (3186,3189), (3194,3197), (3202,3205), (3210,3213), (3218,3221), (3226,3229), (3702,3765)],"leftThighShader"),\
    "rightAnkle":([(1166,1167), (1170,1171), (1174,1175), (1179,1180), (1183,1184), (1186,1187), (1191,1192), (1195,1196), (1262,1265), (1270,1273), (1278,1281), (1286,1289), (1294,1297), (1302,1305), (1310,1313), (1318,1321), (1794,1857)],"rightThighShader"),\
}
FOURCOLOR_DISCRIPTION = {\
    "leftThigh":([(2946,2949), (2962,2989), (3234,3329)],"leftThighShader"),\
    "rightThigh":([(1038,1041), (1054,1081), (1326,1421)],"rightThighShader"),\
    "leftKnee":([(3042,3073), (3106,3137)],"leftThighShader"),\
    "rightKnee":([(1134,1165), (1198,1229)],"rightThighShader"),\
    "leftLeg":([(3076,3077), (3080,3081), (3084,3086), (3089,3090), (3093,3093), (3096,3098), (3101,3102), (3105,3105), (3138,3169), (3174,3177), (3182,3185), (3190,3193), (3198,3201), (3206,3209), (3214,3217), (3222,3225), (3230,3233), (3330,3361)],"leftLegShader"),\
    "rightLeg":([(1168,1169), (1172,1173), (1176,1178), (1181,1182), (1185,1185), (1188,1190), (1193,1194), (1197,1197), (1230,1261), (1266,1269), (1274,1277), (1282,1285), (1290,1293), (1298,1301), (1306,1309), (1314,1317), (1322,1325), (1422,1453)],"rightLegShader"),\
    "leftAnkle":([(3074,3075), (3078,3079), (3082,3083), (3087,3088), (3091,3092), (3094,3095), (3099,3100), (3103,3104), (3170,3173), (3178,3181), (3186,3189), (3194,3197), (3202,3205), (3210,3213), (3218,3221), (3226,3229), (3702,3765)],"leftLegShader"),\
    "rightAnkle":([(1166,1167), (1170,1171), (1174,1175), (1179,1180), (1183,1184), (1186,1187), (1191,1192), (1195,1196), (1262,1265), (1270,1273), (1278,1281), (1286,1289), (1294,1297), (1302,1305), (1310,1313), (1318,1321), (1794,1857)],"rightLegShader"),\
}
EIGHTCOLOR_DISCRIPTION = {\
    "leftThigh":([(2946,2949), (2962,2989), (3234,3329)],"leftThighShader"),\
    "rightThigh":([(1038,1041), (1054,1081), (1326,1421)],"rightThighShader"),\
    "leftKnee":([(3042,3073), (3106,3137)],"leftKneeShader"),\
    "rightKnee":([(1134,1165), (1198,1229)],"rightKneeShader"),\
    "leftLeg":([(3076,3077), (3080,3081), (3084,3086), (3089,3090), (3093,3093), (3096,3098), (3101,3102), (3105,3105), (3138,3169), (3174,3177), (3182,3185), (3190,3193), (3198,3201), (3206,3209), (3214,3217), (3222,3225), (3230,3233), (3330,3361)],"leftLegShader"),\
    "rightLeg":([(1168,1169), (1172,1173), (1176,1178), (1181,1182), (1185,1185), (1188,1190), (1193,1194), (1197,1197), (1230,1261), (1266,1269), (1274,1277), (1282,1285), (1290,1293), (1298,1301), (1306,1309), (1314,1317), (1322,1325), (1422,1453)],"rightLegShader"),\
    "leftAnkle":([(3074,3075), (3078,3079), (3082,3083), (3087,3088), (3091,3092), (3094,3095), (3099,3100), (3103,3104), (3170,3173), (3178,3181), (3186,3189), (3194,3197), (3202,3205), (3210,3213), (3218,3221), (3226,3229), (3702,3765)],"leftAnkleShader"),\
    "rightAnkle":([(1166,1167), (1170,1171), (1174,1175), (1179,1180), (1183,1184), (1186,1187), (1191,1192), (1195,1196), (1262,1265), (1270,1273), (1278,1281), (1286,1289), (1294,1297), (1302,1305), (1310,1313), (1318,1321), (1794,1857)],"rightAnkleShader"),\
}
LOWER_BODY_Discription = FOURCOLOR_DISCRIPTION

class AsyncFactory:
    def __init__(self, func, cb_func, num_threads):
        self.func = func
        self.cb_func = cb_func
        if num_threads <> -1:
            self.pool = mp.Pool(processes=num_threads)
        else:
            self.pool = mp.Pool()
    def call(self,*args, **kwargs):
        self.pool.apply_async(self.func, args, kwargs)
    
    def wait(self):
        self.pool.close()
        self.pool.join()

class Vertix:
    def __init__(self,x,y,z):
        self.x = x
        self.y = y
        self.z = z
    def toString(self):
        return "("+str(self.x)+","+str(self.y)+","+str(self.z)+")"
    def distance_to(self,v):
        return ma.sqrt(ma.pow(self.x-v.x,2)+ma.pow(self.y-v.y,2)+ma.pow(self.z-v.z,2))

def component_range(li):
    toReturn = []
    for l in li:
        if ":" in l:
            two=l.split(":")
            fp=two[0].split("[")
            sp=two[1].split("]")

            f = int(fp[1])
            t = int(sp[0])+1
            for i in range(f,t):
                toReturn.append(fp[0]+"["+str(i)+"]"+sp[1]+"]")
        else:
            toReturn.append(l)
    return toReturn
    
 
def make_dir(path):
    try: 
        os.makedirs(path)
    except OSError:
        if not os.path.isdir(path):
            raise

class Face:
    def __init__(self, name,shader=WHITE_SHADER):
        self.name = name
        self.closest_n = 10000
        self.shader = shader
        self.oldShader = shader
        self.verts = []
        self.vrtsFaceName = cmds.polyListComponentConversion(self.name,ff=True,tvf=True)
        self.vrtsFaceName = component_range(self.vrtsFaceName)
    def update(self):
        #n =  cmds.polyInfo(self.name, fn=True )[0].split()
        #self.normal = Vertix(float(n[2]),float(n[3]),float(n[4]))
        self.verts = []
        for vn in self.vrtsFaceName:
            vrtsName = cmds.polyListComponentConversion(vn,fvf=True,tv=True)
            v = np.array(cmds.xform(vrtsName,query=True, translation=True, worldSpace=True))
            self.verts.append(Vertix(v[0],v[1],v[2]))
        self.centroid = self.get_centroid()
    
    
    def get_centroid(self):
        x=[];y=[];z=[];
        for v in self.verts:
            x.append(v.x)
            y.append(v.y)
            z.append(v.z)
        numOfv = len(self.verts)
        return Vertix(sum(x)/numOfv, sum(y)/numOfv, sum(z)/numOfv)

class FaceBodyPart:
    def __init__(self,face):
        self.face = face
        self.bodypartsdistances = dict()
    
    

class Object:
    def __init__(self,name, partshader=None):
        self.name = name
        
        #print self.numFaces
        self.faces = []

        if partshader == None:
            numFaces = cmds.getAttr(name+'.face', size=1)
            partshader = [(range(self.numFaces),WHITE_SHADER)]

        for x in partshader:
            part, shader = x
            for p in part:
                self.faces.append(Face(name+".f["+str(p)+"]",shader))



class BodyPart:
    def __init__(self,name,center,shader):
        self.center = center
        self.name = name
        self.shader = shader





def whiten(thobe):    
    cmds.sets(thobe,forceElement=THOBE_SHADER)




def color_face(face,shader = WHITE_SHADER):
    # print face.name,shader
    #start_time = time.time()
    cmds.sets(face.name,fe=shader)
    #print("finished timeframe  --- %s seconds ---" % (time.time() - start_time))



def process(items,thobefaces,threshold, start, end):
    lenThobe = len(thobefaces)
    for item in items[start:end]:
            thobePos = 0

            bfc = item.centroid
            bfy = bfc.y
            s = bfy+threshold;e = bfy - threshold;
            
            while thobePos < lenThobe and thobefaces[thobePos].centroid.y > s:
                thobePos += 1
            if thobePos >= lenThobe:
                break
            tsIndex = thobePos
            sc = thobefaces[tsIndex].centroid.y
            
            while sc <= s and sc >= e:
                tf = thobefaces[tsIndex]
                tc = tf.centroid
                dis = bfc.distance_to(tc)
                if dis < threshold and dis < tf.closest_n:
                    tf.closest_n = dis
                    tf.shader = item.shader
                tsIndex += 1
                if tsIndex >= lenThobe:
                    break
                sc = thobefaces[tsIndex].centroid.y



def split_processing(items,thobefaces,threshold, num_splits=20):
    split_size = len(items) // num_splits
    threads = []
    for i in range(num_splits):
        # determine the indices of the list this thread will handle
        start = i * split_size
        # special case on the last chunk to account for uneven splits
        end = None if i+1 == num_splits else (i+1) * split_size
        # create the thread
        threads.append(threading.Thread(target=process, args=(items,thobefaces,threshold, start, end)))
        threads[-1].start() # start the thread we just created
    
    # wait for all threads to finish
    for t in threads:
        t.join()

def coloring_processed():
    pass

def scan_lines(thobefaces,bodyparts,threshold=0.08):
    split_processing(bodyparts,thobefaces,threshold)
    print "processing done"
    start_time = time.time()
    for f in thobefaces:
        if f.closest_n <= threshold:
            color_face(f,f.shader)
        
        
        f.closest_n = 1000


    print("--- %s seconds ---" % (time.time() - start_time))
    print "coloring done"


def sort_by_y(faces):
    faces.sort(key=lambda x: x.centroid.y, reverse=True)



def get_faces_shaders(partsDictionary):
    faces = []
    shaders = []
    for k,v in partsDictionary.iteritems():
        bfaces = []
        for r in v[0]:
            s = r[0]
            e = r[1]+1

            bfaces += range(s,e)
        
        faces.append(bfaces)
        shaders.append(v[1])
    return zip(faces,shaders)



def update_faces(faces):
    for f in faces:
        f.update()

def hideshow(d,i):
    cmds.setAttr(d+"Shape.visibility", i)


def render(start,end,jump=4,thobe="cotton",prefix=None):

    print "Rendering frames %d to %d for dress %s" %(start,end,thobe)
    tfs = get_faces_shaders(THOBE_DISCRIPTION)
    bfs = get_faces_shaders(LOWER_BODY_Discription)

    bodyfaces = Object("BODY",bfs).faces
    thobefaces = Object(thobe,tfs).faces

    if prefix is None:
        prefix =  "%s" %  PROJECT_ROOT
    iffsDir = prefix + "iffs"   
    pngDir = prefix + "pngs"
    
    make_dir(iffsDir)
    make_dir(pngDir)

    
    cmds.workspace(fileRule=("images",iffsDir))

    for i in range(start,end, jump):
        print "rendering frame",i
        whiten(thobe)
        cmds.currentTime(i)
        start_time = time.time()
        update_faces(bodyfaces)
        update_faces(thobefaces)
        sort_by_y(bodyfaces)
        sort_by_y(thobefaces)
        print "scene updated for frame",i
        scan_lines(thobefaces,bodyfaces)
        cmds.hwRender(currentFrame= True)
        ###offset = 16 (camera) * (frame number)/jump
        iff.convert(iffsDir,pngDir,only=str(i),offset=16*i/jump)
        print("finished timeframe %d --- %s seconds ---" % (i,time.time() - start_time))
        #cmds.clearCache( all=True )
        cmds.flushUndo()
        cmds.clearCache( all=True )
        cmds.DeleteHistory()



def main():
    if len(sys.argv)< 2:
        print("usage: %s <start frame> <end frame>]" % sys.argv[0])
        sys.exit(0)
    start = int(sys.argv[1])
    end = int(sys.argv[2])


    ##hide all dresses
    for d in DRESSES:
        hideshow(d,0)

    cmds.workspace(PROJECT_ROOT, o=True)
    for i,d in enumerate(RENDER_DRESSES):
        hideshow(d,1)
        dressDir = "%s/%s/%s/" % (PROJECT_ROOT,RENDER_ROOT, d)
        make_dir(dressDir)
        ostart = start+i%3 # to change the starting point for each dress to give more variety
        render(ostart,end,thobe=d,prefix=dressDir)
        hideshow(d,0)
        




if __name__ == "__main__":
    main()



    



